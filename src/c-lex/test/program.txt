#include "lexer.h"
float f = 3.14156;
double d = 16.5;

Scanner scanner = { 0 }; /* Scanner for reading the file */
LAResult result = { 0 }; /* Where to save the Lexical Analysis results */
Map map = { 0 }; /* A hash table for identifying keywords */

result->ptr;

static char tBuffer[100] = { 0 }; /* Buffer for lexeme */
static long int current = 0; /* Current buffer position */

/* Principal Linkage Functions */
static void InitLexer ( const char* path );
static void MainLexer ( void );
static void CloseLexer ( void );
static void PrintTokens ( void );

void InitLexer ( const char* path ) {
    __TokenList = malloc( __CurrentSize * sizeof(Token) );
    scanner = InitScanner(path);
    map = InitMap();
}

void CloseLexer ( void ) {
    result.Tokens = malloc( __Tokens * sizeof(Token) );
    memcpy( result.Tokens, __TokenList, __Tokens * sizeof(Token) );
    result.tTokens = __Tokens;
    freeTokenList();
    scanner.destroy();
}

void CloseLexerResult (void ) {
    if (result.Tokens) free(result.Tokens);
    result.Tokens = NULL;
}

/* Helpers */
static void AddToken ( TokenType type );
static bool IsAlpha ( char c );
static bool IsDigit ( char c );
static void Identifiers ( void );
static void String ( void );
static void Number ( void );
static void Character ( void );
static void Comments ( void );
static void Preprocessor ( void );

void PrintTokens ( void ) {
    if ( !__TokenList ) return;
    for ( int i = 0; i < __Tokens; i++ ) printToken(__TokenList[i]);
}

void AddToken ( TokenType type ) {
    addToken( makeToken( tBuffer, scanner.get_line_number(), current, type ) );
    memset( &tBuffer[0], 0, current + 1 ); /* Is it really necessary to set all the chars in tBuffer to 0 when adding a new token? */
    current = -1;
}

bool IsAlpha ( char c ) {
    return (('a' <= c && c <= 'z') || ('A' <= c && c <= 'Z') || c == '_');
}

bool IsDigit ( char c ) {
    return '0' <= c && c <= '9';
}

void Lexer ( const char* path ) {
    InitLexer(path);
    MainLexer();
    CloseLexer();
}

void MainLexer ( void ) { /* Lexer structure based on Crafting Interpreters: https://craftinginterpreters.com/scanning.html */
    while ( scanner.peek() != '\0' ) {
        char c = scanner.peek();
        tBuffer[current] = c;
        switch ( c ) {
            default:
                if ( IsDigit(c) ) Number();
                else if ( IsAlpha(c) ) Identifiers();
                else { lexer_error("Unexpected character at line %d, %c \n", scanner.get_line_number(), c) }
                break;

            case '(': AddToken(LEFT_PAREN); break;
            case ')': AddToken(RIGHT_PAREN); break;
            case '{': AddToken(LEFT_BRACE); break;
            case '}': AddToken(RIGHT_BRACE); break;
            case ',': AddToken(COMMA); break;
            case '.': AddToken(DOT); break;
            case ':': AddToken(DOTS); break;
            case '-': AddToken(scanner.match('-') ? MINUS_MINUS : scanner.match('=') ? MINUS_EQUAL : scanner.match('>') ? ARROW : MINUS); break;
            case '+': AddToken(scanner.match('+') ? PLUS_PLUS : scanner.match('=') ? PLUS_EQUAL : PLUS); break;
            case '=': AddToken(scanner.match('=') ? EQUAL_EQUAL : EQUAL); break;
            case '<': AddToken(scanner.match('=') ? LESSER_EQUAL : LESSER); break;
            case '>': AddToken(scanner.match('=') ? GREATER_EQUAL : GREATER); break;
            case ';': AddToken(SEMICOLON); break;

            case '/':
                if ( scanner.next() == '/' || scanner.next() == '*' ) Comments();
                else AddToken( scanner.match('=') ? SLASH_EQUAL : SLASH );
                break;

            case '*': AddToken(scanner.match('=') ? STAR_EQUAL : STAR); break;
            case '&': AddToken(scanner.match('&') ? AND : scanner.match('=') ? BIT_AND_EQUAL : BIT_AND); break;
            case '|': AddToken(scanner.match('|') ? OR: scanner.match('=') ? BIT_OR_EQUAL : BIT_OR); break;
            case '^': AddToken(scanner.match('=') ? X_OR_EQUAL : X_OR); break;
            case '!': AddToken(scanner.match('=') ? DIFFERENT : NOT); break;
            case '[': AddToken(LEFT_BRACKET); break;
            case ']': AddToken(RIGHT_BRACKET); break;
            case '?': AddToken(QUESTION); break;
            case '"': String(); break;
            case '\'': Character(); break;
            case '#': Preprocessor(); break;

            case '\t':
            case '\n':
            case ' ':
                current = -1;
                break;
        }
        scanner.advance();
        current++;
    }
    PrintTokens();
}

static bool IsAlphaNumeric ( char c ) { return IsDigit(c) || IsAlpha(c); }

static void Identifiers ( void ) {
    while ( IsAlphaNumeric(scanner.next()) ) {
        tBuffer[current++] = scanner.peek();
        scanner.advance();
    }
    tBuffer[current] = scanner.peek();
    current++;
    TokenType type = map.get_token(tBuffer, current);
    AddToken( type == ERROR ? IDENTIFIER : type );
}

static void ReadNumber ( void ) {
    while ( IsDigit(scanner.next()) ) {
        tBuffer[current++] = scanner.peek();
        scanner.advance();
    }
    tBuffer[current] = scanner.peek();
}

static void Number ( void ) {
    ReadNumber();
    if ( scanner.next() == '.' ) ReadNumber();
    AddToken(NUMBER);
}

static void String ( void ) {
    scanner.advance();
    while ( scanner.peek() != '"' ) {
        if ( scanner.next() == '\0' ) { error_at("Unterminated string literal at line: %d\n", scanner.get_line_number()) }
        tBuffer[current++] = scanner.peek();
        scanner.advance();
    }
    AddToken(STRING);
}

static char HandleSlashChar ( char c ) {
    switch (c) {
        default: error_at("Invalid character literal %c\n", c);
        case 'n' : return '\n';
        case '\\' : return '\\';
        case 't' : return '\t';
        case '0' : return '\0';
        case '?': return '\?';
        case 'r': return '\r';
        case '"': return '\"';
        case 'a': return '\a';
        case 'b': return '\b';
        case 'f': return '\f';
        case 'v': return '\v';
        case '\'': return '\'';
    }
}

static void Character(void) {
    // Verificar fin de archivo antes de leer
    if (scanner.peek() == '\0') {error_at("Unterminated character literal at line: %d\n", scanner.get_line_number());}

    char c = scanner.advance();
    bool is_escaped = false;

    // Manejar secuencias de escape
    if (c == '\\') {
        is_escaped = true;
        if (scanner.peek() == '\0') {error_at("Incomplete escape sequence at line: %d\n", scanner.get_line_number());}
        char escape_char = scanner.advance();
        c = HandleSlashChar(escape_char);  // Función que maneja caracteres escapados
    }

    // Validar caracteres inválidos sin escape
    if (!is_escaped && c == '\'') {error_at("Unexpected unescaped ' in character literal at line: %d\n", scanner.get_line_number());}

    // Verificar y consumir la comilla de cierre
    if (scanner.peek() == '\0') {error_at("Unterminated character literal at line: %d\n", scanner.get_line_number());}

    if (scanner.next() != '\'') {error_at("Expected closing ' at line: %d\n", scanner.get_line_number());}
    scanner.advance();  // Consumir la comilla de cierre

    // Almacenar y generar token
    tBuffer[current++] = c;
    AddToken(CHARACTER);
}

static void Comments ( void ) {
    char end = scanner.next() == '/' ? '\n' : '/';
    while (1) {
        if ((end == '/' && scanner.peek() == '*' && scanner.next() == '/') || (end == '\n' && scanner.next() == end)) break;
        else if (scanner.peek() == '\0') { error_at("Unterminated commentary at line %d\n", scanner.get_line_number()) }
        scanner.advance();
    }
    scanner.advance();
}

static void Preprocessor ( void ) { while ( scanner.peek() != '\n' ) scanner.advance(); }